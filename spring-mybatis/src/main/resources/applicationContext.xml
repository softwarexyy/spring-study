<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-aop.xsd">

    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test?userSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC"/>
        <property name="username" value="root"/>
        <property name="password" value="xieyunyu"/>
    </bean>

    <!-- SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="mybatis-config.xml"/>    <!-- mybatis配置文件 -->
        <property name="mapperLocations" value="mappers/*.xml"/>   <!-- mappers.xml配置文件 -->
    </bean>

    <!-- SqlSessionTemplate: 相当于之前使用的sqlSession -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- 方式一: 将Mapper注册到Spring容器中 -->
    <bean id="userMapper" class="com.yancy.dao.UserMapperImpl">
        <property name="sqlSessionTemplate" ref="sqlSessionTemplate"/>
    </bean>

    <!-- 方式二：配置mapper扫描位置，方便动态注册mapper作为spring bean -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yancy.dao2"/>
    </bean>

<!-- =========== 以下: 用AOP实现事务 ========= -->
    <!--    配置事务管理器-->
    <bean id="myTxManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!-- ============ 结合AOP织入事务 ============ -->
    <!-- 配置事务通知-->
    <tx:advice id="myTxAdvice" transaction-manager="myTxManager">
        <!-- 给哪些方法配置事务 -->
        <tx:attributes>
            <!-- <tx:method name="add"/>-->
            <!-- <tx:method name="delete"/>-->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

<!-- ============ 配置事务切入 =============== -->
    <aop:config>
        <aop:pointcut id="txPointCut" expression="execution(* com.yancy.dao.*.*(..))"/>
        <aop:advisor advice-ref="myTxAdvice" pointcut-ref="txPointCut"/>
    </aop:config>

</beans>